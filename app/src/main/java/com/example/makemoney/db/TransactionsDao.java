package com.example.makemoney.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.makemoney.Transactions;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTIONS".
*/
public class TransactionsDao extends AbstractDao<Transactions, Long> {

    public static final String TABLENAME = "TRANSACTIONS";

    /**
     * Properties of entity Transactions.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartPosition = new Property(1, double.class, "startPosition", false, "START_POSITION");
        public final static Property StopLoss = new Property(2, double.class, "stopLoss", false, "STOP_LOSS");
        public final static Property StopProfit = new Property(3, double.class, "stopProfit", false, "STOP_PROFIT");
        public final static Property DVaule = new Property(4, double.class, "dVaule", false, "D_VAULE");
        public final static Property Cycle = new Property(5, String.class, "cycle", false, "CYCLE");
        public final static Property TradingStrategies = new Property(6, String.class, "tradingStrategies", false, "TRADING_STRATEGIES");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property State = new Property(8, int.class, "state", false, "STATE");
        public final static Property ProfitOrLossM = new Property(9, double.class, "profitOrLossM", false, "PROFIT_OR_LOSS_M");
        public final static Property Varieties = new Property(10, String.class, "varieties", false, "VARIETIES");
        public final static Property TotalAmount = new Property(11, double.class, "totalAmount", false, "TOTAL_AMOUNT");
        public final static Property SellOrBuy = new Property(12, String.class, "sellOrBuy", false, "SELL_OR_BUY");
    }


    public TransactionsDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"START_POSITION\" REAL NOT NULL ," + // 1: startPosition
                "\"STOP_LOSS\" REAL NOT NULL ," + // 2: stopLoss
                "\"STOP_PROFIT\" REAL NOT NULL ," + // 3: stopProfit
                "\"D_VAULE\" REAL NOT NULL ," + // 4: dVaule
                "\"CYCLE\" TEXT," + // 5: cycle
                "\"TRADING_STRATEGIES\" TEXT," + // 6: tradingStrategies
                "\"DATE\" INTEGER," + // 7: date
                "\"STATE\" INTEGER NOT NULL ," + // 8: state
                "\"PROFIT_OR_LOSS_M\" REAL NOT NULL ," + // 9: profitOrLossM
                "\"VARIETIES\" TEXT," + // 10: varieties
                "\"TOTAL_AMOUNT\" REAL NOT NULL ," + // 11: totalAmount
                "\"SELL_OR_BUY\" TEXT);"); // 12: sellOrBuy
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTIONS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Transactions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getStartPosition());
        stmt.bindDouble(3, entity.getStopLoss());
        stmt.bindDouble(4, entity.getStopProfit());
        stmt.bindDouble(5, entity.getDVaule());
 
        String cycle = entity.getCycle();
        if (cycle != null) {
            stmt.bindString(6, cycle);
        }
 
        String tradingStrategies = entity.getTradingStrategies();
        if (tradingStrategies != null) {
            stmt.bindString(7, tradingStrategies);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindDouble(10, entity.getProfitOrLossM());
 
        String varieties = entity.getVarieties();
        if (varieties != null) {
            stmt.bindString(11, varieties);
        }
        stmt.bindDouble(12, entity.getTotalAmount());
 
        String sellOrBuy = entity.getSellOrBuy();
        if (sellOrBuy != null) {
            stmt.bindString(13, sellOrBuy);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Transactions entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getStartPosition());
        stmt.bindDouble(3, entity.getStopLoss());
        stmt.bindDouble(4, entity.getStopProfit());
        stmt.bindDouble(5, entity.getDVaule());
 
        String cycle = entity.getCycle();
        if (cycle != null) {
            stmt.bindString(6, cycle);
        }
 
        String tradingStrategies = entity.getTradingStrategies();
        if (tradingStrategies != null) {
            stmt.bindString(7, tradingStrategies);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindDouble(10, entity.getProfitOrLossM());
 
        String varieties = entity.getVarieties();
        if (varieties != null) {
            stmt.bindString(11, varieties);
        }
        stmt.bindDouble(12, entity.getTotalAmount());
 
        String sellOrBuy = entity.getSellOrBuy();
        if (sellOrBuy != null) {
            stmt.bindString(13, sellOrBuy);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Transactions readEntity(Cursor cursor, int offset) {
        Transactions entity = new Transactions( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // startPosition
            cursor.getDouble(offset + 2), // stopLoss
            cursor.getDouble(offset + 3), // stopProfit
            cursor.getDouble(offset + 4), // dVaule
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cycle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tradingStrategies
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.getInt(offset + 8), // state
            cursor.getDouble(offset + 9), // profitOrLossM
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // varieties
            cursor.getDouble(offset + 11), // totalAmount
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // sellOrBuy
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Transactions entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartPosition(cursor.getDouble(offset + 1));
        entity.setStopLoss(cursor.getDouble(offset + 2));
        entity.setStopProfit(cursor.getDouble(offset + 3));
        entity.setDVaule(cursor.getDouble(offset + 4));
        entity.setCycle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTradingStrategies(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setState(cursor.getInt(offset + 8));
        entity.setProfitOrLossM(cursor.getDouble(offset + 9));
        entity.setVarieties(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalAmount(cursor.getDouble(offset + 11));
        entity.setSellOrBuy(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Transactions entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Transactions entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Transactions entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
